#version 430

#ifdef GL_ES
precision highp float;
#endif

uniform float zoom;
uniform vec2 trans;
uniform float magnification;

void main () {
  
  
  
  


  vec2 crosshairPos = vec2(magnification * 2.5 + 0.5, magnification + 0.5);
  if ((length(gl_FragCoord-crosshairPos) < 10) && (gl_FragCoord.x == crosshairPos.x || gl_FragCoord.y == crosshairPos.y)) {
    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
  } else {


    vec2 scaledPos = vec2(gl_FragCoord.x/magnification - 2.5, gl_FragCoord.y/magnification - 1.0);
    vec2 scaledTrans = trans * zoom/magnification;
    vec2 pos0 = vec2((scaledPos.x + scaledTrans.x)/zoom, (scaledPos.y + scaledTrans.y)/zoom);

    float x = 0.0;
    float y = 0.0;
    float x2 = 0.0;
    float y2 = 0.0;


    int iteration = 0;
    int max_iteration = 1000;

    while (x2 + y2 <= 4.0 && iteration < max_iteration) {

      y = (x + x) * y + pos0.y;
      x = x2 - y2 + pos0.x;
      x2 = x * x;
      y2 = y * y;

      iteration += 1;
    }

    

    if (iteration == max_iteration) {
      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
    } else {
      
      float fl_iteration = float(iteration);
      float fl_max_iteration = float(max_iteration);
      if (iteration < max_iteration) {
  
        float log_zn = log(x*x + y*y) / 2;
        float nu = log(log_zn / log(2)) / log(2);
  
        fl_iteration += 1 - nu;
      }
      
      vec3 rainbow[] = vec3[](vec3(1.0, 0.09999999999999998, 0.0),vec3(1.0, 0.30000000000000004, 0.0),vec3(1.0, 0.5, 0.0),vec3(1.0, 0.7, 0.0),vec3(1.0, 0.9, 0.0),vec3(0.8999999999999999, 1.0, 0.0),vec3(0.7, 1.0, 0.0),vec3(0.5, 1.0, 0.0),vec3(0.30000000000000004, 1.0, 0.0),vec3(0.10000000000000009, 1.0, 0.0),vec3(0.10000000000000009, 1.0, 0.0),vec3(0.2999999999999998, 1.0, 0.0),vec3(0.5, 1.0, 0.0),vec3(0.7000000000000002, 1.0, 0.0),vec3(0.8999999999999999, 1.0, 0.0),vec3(0.0, 0.8999999999999999, 1.0),vec3(0.0, 0.7000000000000002, 1.0),vec3(0.0, 0.5, 1.0),vec3(0.0, 0.2999999999999998, 1.0),vec3(0.0, 0.10000000000000009, 1.0),vec3(0.09999999999999964, 0.0, 1.0),vec3(0.2999999999999998, 0.0, 1.0),vec3(0.5, 0.0, 1.0),vec3(0.7000000000000002, 0.0, 1.0),vec3(0.9000000000000004, 0.0, 1.0),vec3(1.0, 0.0, 0.9000000000000004),vec3(1.0, 0.0, 0.7000000000000002),vec3(1.0, 0.0, 0.5),vec3(1.0, 0.0, 0.2999999999999998),vec3(1.0, 0.0, 0.09999999999999964));
      vec3 superRainbow[] = vec3[](vec3(1.0, 0.030000000000000138, 0.0),vec3(1.0, 0.09000000000000019, 0.0),vec3(1.0, 0.15000000000000013, 0.0),vec3(1.0, 0.2100000000000002, 0.0),vec3(1.0, 0.27000000000000024, 0.0),vec3(1.0, 0.3300000000000002, 0.0),vec3(1.0, 0.39000000000000024, 0.0),vec3(1.0, 0.4500000000000002, 0.0),vec3(1.0, 0.5100000000000002, 0.0),vec3(1.0, 0.5700000000000002, 0.0),vec3(1.0, 0.6300000000000002, 0.0),vec3(1.0, 0.6900000000000002, 0.0),vec3(1.0, 0.7500000000000002, 0.0),vec3(1.0, 0.8100000000000002, 0.0),vec3(1.0, 0.8700000000000002, 0.0),vec3(1.0, 0.9300000000000002, 0.0),vec3(1.0, 0.9900000000000002, 0.0),vec3(0.9499999999999997, 1.0, 0.0),vec3(0.8899999999999999, 1.0, 0.0),vec3(0.8299999999999996, 1.0, 0.0),vec3(0.7699999999999998, 1.0, 0.0),vec3(0.71, 1.0, 0.0),vec3(0.6499999999999997, 1.0, 0.0),vec3(0.5899999999999999, 1.0, 0.0),vec3(0.5299999999999998, 1.0, 0.0),vec3(0.46999999999999975, 1.0, 0.0),vec3(0.4099999999999999, 1.0, 0.0),vec3(0.34999999999999987, 1.0, 0.0),vec3(0.2899999999999998, 1.0, 0.0),vec3(0.22999999999999976, 1.0, 0.0),vec3(0.1699999999999997, 1.0, 0.0),vec3(0.10999999999999988, 1.0, 0.0),vec3(0.04999999999999982, 1.0, 0.0),vec3(0.010000000000000231, 1.0, 0.0),vec3(0.07000000000000028, 1.0, 0.0),vec3(0.13000000000000034, 1.0, 0.0),vec3(0.18999999999999995, 1.0, 0.0),vec3(0.25, 1.0, 0.0),vec3(0.3100000000000005, 1.0, 0.0),vec3(0.3700000000000001, 1.0, 0.0),vec3(0.43000000000000016, 1.0, 0.0),vec3(0.4900000000000002, 1.0, 0.0),vec3(0.5499999999999998, 1.0, 0.0),vec3(0.6100000000000003, 1.0, 0.0),vec3(0.6700000000000004, 1.0, 0.0),vec3(0.73, 1.0, 0.0),vec3(0.79, 1.0, 0.0),vec3(0.8500000000000001, 1.0, 0.0),vec3(0.9100000000000006, 1.0, 0.0),vec3(0.9700000000000002, 1.0, 0.0),vec3(0.0, 0.9699999999999998, 1.0),vec3(0.0, 0.9099999999999997, 1.0),vec3(0.0, 0.8500000000000001, 1.0),vec3(0.0, 0.7899999999999996, 1.0),vec3(0.0, 0.7299999999999995, 1.0),vec3(0.0, 0.6699999999999999, 1.0),vec3(0.0, 0.6099999999999999, 1.0),vec3(0.0, 0.5499999999999998, 1.0),vec3(0.0, 0.48999999999999977, 1.0),vec3(0.0, 0.4299999999999997, 1.0),vec3(0.0, 0.36999999999999966, 1.0),vec3(0.0, 0.31000000000000005, 1.0),vec3(0.0, 0.25, 1.0),vec3(0.0, 0.1899999999999995, 1.0),vec3(0.0, 0.1299999999999999, 1.0),vec3(0.0, 0.06999999999999984, 1.0),vec3(0.0, 0.009999999999999787, 1.0),vec3(0.04999999999999982, 0.0, 1.0),vec3(0.11000000000000032, 0.0, 1.0),vec3(0.16999999999999993, 0.0, 1.0),vec3(0.23000000000000043, 0.0, 1.0),vec3(0.29000000000000004, 0.0, 1.0),vec3(0.34999999999999964, 0.0, 1.0),vec3(0.41000000000000014, 0.0, 1.0),vec3(0.46999999999999975, 0.0, 1.0),vec3(0.5300000000000002, 0.0, 1.0),vec3(0.5900000000000007, 0.0, 1.0),vec3(0.6500000000000004, 0.0, 1.0),vec3(0.71, 0.0, 1.0),vec3(0.7699999999999996, 0.0, 1.0),vec3(0.8300000000000001, 0.0, 1.0),vec3(0.8900000000000006, 0.0, 1.0),vec3(0.9500000000000002, 0.0, 1.0),vec3(1.0, 0.0, 0.9899999999999993),vec3(1.0, 0.0, 0.9300000000000006),vec3(1.0, 0.0, 0.8700000000000001),vec3(1.0, 0.0, 0.8099999999999996),vec3(1.0, 0.0, 0.75),vec3(1.0, 0.0, 0.6899999999999995),vec3(1.0, 0.0, 0.6299999999999999),vec3(1.0, 0.0, 0.5699999999999994),vec3(1.0, 0.0, 0.5099999999999998),vec3(1.0, 0.0, 0.4500000000000002),vec3(1.0, 0.0, 0.3899999999999997),vec3(1.0, 0.0, 0.33000000000000007),vec3(1.0, 0.0, 0.2699999999999996),vec3(1.0, 0.0, 0.20999999999999908),vec3(1.0, 0.0, 0.15000000000000036),vec3(1.0, 0.0, 0.08999999999999986),vec3(1.0, 0.0, 0.03000000000000025));
      vec3 blue[] = vec3[](vec3(0.9375,0.96875,0.99609375),vec3(0.8984375,0.8984375,0.9765625),vec3(0.6875,0.875,0.8984375),vec3(0.67578125,0.84375,0.8984375),vec3(0.52734375,0.8046875,0.9765625),vec3(0.52734375,0.8046875,0.91796875),vec3(0.0,0.74609375,0.99609375),vec3(0.6875,0.765625,0.8671875),vec3(0.1171875,0.5625,0.99609375),vec3(0.390625,0.58203125,0.92578125),vec3(0.2734375,0.5078125,0.703125),vec3(0.37109375,0.6171875,0.625),vec3(0.48046875,0.40625,0.9296875),vec3(0.4140625,0.3515625,0.80078125),vec3(0.28125,0.23828125,0.54296875),vec3(0.25390625,0.41015625,0.87890625),vec3(0.0,0.0,0.99609375),vec3(0.0,0.0,0.80078125),vec3(0.0,0.0,0.54296875),vec3(0.0,0.0,0.5),vec3(0.09765625,0.09765625,0.4375),vec3(0.5390625,0.16796875,0.8828125),vec3(0.29296875,0.0,0.5078125));
      vec3 purple[] = vec3[](vec3(0.8984375, 0.8984375, 0.9765625), vec3(0.84375, 0.74609375, 0.84375), vec3(0.86328125, 0.625, 0.86328125), vec3(0.9296875, 0.5078125, 0.9296875), vec3(0.8515625, 0.4375, 0.8359375), vec3(0.99609375, 0.0, 0.99609375), vec3(0.99609375, 0.0, 0.99609375), vec3(0.7265625, 0.33203125, 0.82421875), vec3(0.57421875, 0.4375, 0.85546875), vec3(0.5390625, 0.16796875, 0.8828125), vec3(0.578125, 0.0, 0.82421875), vec3(0.59765625, 0.1953125, 0.796875), vec3(0.54296875, 0.0, 0.54296875), vec3(0.5, 0.0, 0.5), vec3(0.29296875, 0.0, 0.5078125));
      vec3 cyan[] = vec3[](vec3(0.875,0.99609375,0.99609375),vec3(0.0,0.99609375,0.99609375),vec3(0.0,0.99609375,0.99609375),vec3(0.49609375,0.99609375,0.828125),vec3(0.3984375,0.80078125,0.6640625),vec3(0.68359375,0.9296875,0.9296875),vec3(0.25,0.875,0.8125),vec3(0.28125,0.81640625,0.796875),vec3(0.0,0.8046875,0.81640625),vec3(0.125,0.6953125,0.6640625),vec3(0.37109375,0.6171875,0.625),vec3(0.0,0.54296875,0.54296875),vec3(0.0,0.5,0.5));
      vec3 red[] = vec3[](vec3(0.99609375,0.625,0.4765625),vec3(0.9765625,0.5,0.4453125),vec3(0.91015625,0.5859375,0.4765625),vec3(0.9375,0.5,0.5),vec3(0.80078125,0.359375,0.359375),vec3(0.859375,0.078125,0.234375),vec3(0.6953125,0.1328125,0.1328125),vec3(0.99609375,0.0,0.0),vec3(0.54296875,0.0,0.0),vec3(0.5,0.0,0.0),vec3(0.99609375,0.38671875,0.27734375),vec3(0.99609375,0.26953125,0.0),vec3(0.85546875,0.4375,0.57421875));
      vec3 yellowGradient[] = vec3[](vec3(0.99609375,0.99609375,0.796875),vec3(0.99609375,0.99609375,0.59765625),vec3(0.99609375,0.99609375,0.3984375),vec3(0.99609375,0.99609375,0.19921875),vec3(0.99609375,0.99609375,0.0),vec3(0.796875,0.796875,0.0),vec3(0.59765625,0.59765625,0.0),vec3(0.3984375,0.3984375,0.0),vec3(0.19921875,0.19921875,0.0));
      vec3 yellow[] = vec3[](vec3(0.99609375,0.99609375,0.875),vec3(0.99609375,0.9765625,0.80078125),vec3(0.9765625,0.9765625,0.8203125),vec3(0.99609375,0.93359375,0.83203125),vec3(0.99609375,0.890625,0.70703125),vec3(0.99609375,0.8515625,0.72265625),vec3(0.9296875,0.90625,0.6640625),vec3(0.9375,0.8984375,0.546875),vec3(0.73828125,0.71484375,0.41796875),vec3(0.99609375,0.99609375,0.0),vec3(0.5,0.5,0.0),vec3(0.67578125,0.99609375,0.18359375),vec3(0.6015625,0.80078125,0.1953125));

      
      vec3 colors[] = rainbow;
      
      //    !!! use the following values for index1 and index2 for changing colours while zooming in.
      //int index1 = int(mod(floor(fl_iteration) / (0.5 * log(zoom)+1.0), colors.length()));
      //int index2 = int(mod(floor(fl_iteration + 1.0) / (0.5 * log(zoom)+1.0), colors.length()));
      
      int index1 = int(mod(floor(fl_iteration), colors.length()));
      int index2 = int(mod(floor(fl_iteration + 1.0), colors.length()));
      
      
      vec3 c1 = colors[index1];
      vec3 c2 = colors[index2];

      vec3 c = mix(c1, c2, mod(fl_iteration, 1.0)); // a - (b * floor(a/b))
      gl_FragColor = vec4(c, 1.0);
    }
  }
}


  
